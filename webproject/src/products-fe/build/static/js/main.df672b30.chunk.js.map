{"version":3,"sources":["components/Header.js","constants/index.js","components/NewProductForm.js","components/NewProductModal.js","components/ConfirmRemovalModal.js","components/ProductList.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","API_URL","NewProductForm","state","pk","name","description","quantity","unit_price","stock_level","onChange","e","setState","target","value","createProduct","preventDefault","axios","post","then","props","resetState","toggle","editProduct","put","defaultIfEmpty","this","product","Form","onSubmit","FormGroup","Label","for","Input","type","Button","React","NewProductModal","modal","previous","create","title","button","onClick","color","style","minWidth","Modal","isOpen","ModalHeader","ModalBody","ConfirmRemovalModal","deleteProduct","delete","ModalFooter","ProductList","stocks","Table","bgcolor","length","colSpan","align","map","Home","getStocks","get","res","data","Container","marginTop","Row","Col","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.df672b30.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Header extends Component {\n  render() {\n    return (\n      \n      <div className=\"text-center\"   >\n        <h1>SuperMarket Management System </h1>\n        <h3>Stocks (Using React and Django)</h3>\n        <hr />\n      </div>\n    );\n  }\n}\n\nexport default Header;","export const API_URL = \"http://localhost:8000/api/stocks/\";","import React from \"react\";\nimport { Button, Form, FormGroup, Input, Label } from \"reactstrap\";\n\nimport axios from \"axios\";\n\nimport { API_URL } from \"../constants\";\n\nclass NewProductForm extends React.Component {\n  state = {\n    pk: 0,\n    name: \"\",\n    description: \"\",\n    quantity: \"\",\n    unit_price: \"\",\n    stock_level: \"\"\n  };\n\n  componentDidMount() {\n    if (this.props.product) {\n      const { pk, name, description, quantity, unit_price, stock_level } = this.props.product;\n      this.setState({ pk, name, description, quantity, unit_price, stock_level });\n    }\n  }\n\n  onChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  createProduct = e => {\n    e.preventDefault();\n    axios.post(API_URL, this.state).then(() => {\n      this.props.resetState();\n      this.props.toggle();\n    });\n  };\n\n  editProduct = e => {\n    e.preventDefault();\n    axios.put(API_URL + this.state.pk, this.state).then(() => {\n      this.props.resetState();\n      this.props.toggle();\n    });\n  };\n\n  defaultIfEmpty = value => {\n    return value === \"\" ? \"\" : value;\n  };\n\n  render() {\n    return (\n      <Form onSubmit={this.props.product ? this.editProduct : this.createProduct}>\n        <FormGroup>\n          <Label for=\"name\">Name:</Label>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            onChange={this.onChange}\n            value={this.defaultIfEmpty(this.state.name)}\n          />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"description\">Description:</Label>\n          <Input\n            type=\"text\"\n            name=\"description\"\n            onChange={this.onChange}\n            value={this.defaultIfEmpty(this.state.description)}\n          />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"quantity\">Quantity:</Label>\n          <Input\n            type=\"text\"\n            name=\"quantity\"\n            onChange={this.onChange}\n            value={this.defaultIfEmpty(this.state.quantity)}\n          />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"unit_price\">Unit price:</Label>\n          <Input\n            type=\"text\"\n            name=\"unit_price\"\n            onChange={this.onChange}\n            value={this.defaultIfEmpty(this.state.unit_price)}\n          />\n        </FormGroup>\n         <FormGroup>\n          <Label for=\"stock_level\">Stock level:</Label>\n          <Input\n            type=\"text\"\n            name=\"stock_level\"\n            onChange={this.onChange}\n            value={this.defaultIfEmpty(this.state.stock_level)}\n          />\n        </FormGroup>\n        <Button>Submit</Button>\n      </Form>\n    );\n  }\n}\n\nexport default NewProductForm;","import React, { Component, Fragment } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody } from \"reactstrap\";\nimport NewProductForm from \"./NewProductForm\";\n\nclass NewProductModal extends Component {\n  state = {\n    modal: false\n  };\n\n  toggle = () => {\n    this.setState(previous => ({\n      modal: !previous.modal\n    }));\n  };\n\n  render() {\n    const create = this.props.create;\n\n    var title = \"Editing Product\";\n    var button = <Button onClick={this.toggle}>Edit</Button>;\n    if (create) {\n      title = \"Creating New Product\";\n\n      button = (\n        <Button\n          color=\"primary\"\n          className=\"float-right\"\n          onClick={this.toggle}\n          style={{ minWidth: \"200px\" }}\n        >\n          Create New\n        </Button>\n      );\n    }\n\n    return (\n      <Fragment>\n        {button}\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\n          <ModalHeader toggle={this.toggle}>{title}</ModalHeader>\n\n          <ModalBody>\n            <NewProductForm\n              resetState={this.props.resetState}\n              toggle={this.toggle}\n              product={this.props.product}\n            />\n          </ModalBody>\n        </Modal>\n      </Fragment>\n    );\n  }\n}\n\nexport default NewProductModal;","import React, { Component, Fragment } from \"react\";\nimport { Modal, ModalHeader, Button, ModalFooter } from \"reactstrap\";\n\nimport axios from \"axios\";\n\nimport { API_URL } from \"../constants\";\n\nclass ConfirmRemovalModal extends Component {\n  state = {\n    modal: false\n  };\n\n  toggle = () => {\n    this.setState(previous => ({\n      modal: !previous.modal\n    }));\n  };\n\n  deleteProduct = pk => {\n    axios.delete(API_URL + pk).then(() => {\n      this.props.resetState();\n      this.toggle();\n    });\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <Button color=\"danger\" onClick={() => this.toggle()}>\n          Remove\n        </Button>\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\n          <ModalHeader toggle={this.toggle}>\n            Do you really wanna delete the product?\n          </ModalHeader>\n\n          <ModalFooter>\n            <Button type=\"button\" onClick={() => this.toggle()}>\n              Cancel\n            </Button>\n            <Button\n              type=\"button\"\n              color=\"primary\"\n              onClick={() => this.deleteProduct(this.props.pk)}\n            >\n              Yes\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </Fragment>\n    );\n  }\n}\n\nexport default ConfirmRemovalModal;","import React, { Component } from \"react\";\nimport { Table } from \"reactstrap\";\nimport NewProductModal from \"./NewProductModal\";\n\nimport ConfirmRemovalModal from \"./ConfirmRemovalModal\";\n\nclass ProductList extends Component {\n  render() {\n    const stocks = this.props.stocks;\n    return (\n      <Table bgcolor='FDD897'>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Description</th>\n            <th>Quantity</th>\n            <th>Unit price</th>\n            <th>Stock level</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {!stocks || stocks.length <= 0 ? (\n            <tr>\n              <td colSpan=\"6\" align=\"center\">\n                <b>Oops, no one here yet</b>\n              </td>\n            </tr>\n              \n          ) : (\n            stocks.map(product => (\n              <tr key={product.pk}>\n                <td>{product.name}</td>\n                <td>{product.description}</td>\n                <td>{product.quantity}</td>\n                <td>{product.unit_price}</td>\n                <td>{product.stock_level}</td>\n                <td align=\"center\">\n                  <NewProductModal\n                    create={false}\n                    product={product}\n                    resetState={this.props.resetState}\n                  />\n                  &nbsp;&nbsp;\n                  <ConfirmRemovalModal\n                    pk={product.pk}\n                    resetState={this.props.resetState}\n                  />\n                </td>\n              </tr>\n              \n            ))\n          )}\n        </tbody>\n      </Table>\n    );\n  }\n}\n\nexport default ProductList;","import React, { Component } from \"react\";\nimport { Col, Container, Row } from \"reactstrap\";\nimport ProductList from \"./ProductList\";\nimport NewProductModal from \"./NewProductModal\";\n\nimport axios from \"axios\";\n\nimport { API_URL } from \"../constants\";\n\nclass Home extends Component {\n  state = {\n    stocks: []\n  };\n\n  componentDidMount() {\n    this.resetState();\n  }\n\n  getStocks = () => {\n    axios.get(API_URL).then(res => this.setState({ stocks: res.data }));\n  };\n\n  resetState = () => {\n    this.getStocks();\n  };\n\n  render() {\n    return (\n      <Container style={{ marginTop: \"20px\" }}>\n        <Row>\n          <Col>\n            <ProductList\n              stocks={this.state.stocks}\n              resetState={this.resetState}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <NewProductModal create={true} resetState={this.resetState} />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Home;","import React, { Component, Fragment } from \"react\";\nimport Header from \"./components/Header\";\nimport Home from \"./components/Home\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Header />\n        <Home />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}